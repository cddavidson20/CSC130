For this solution I decided to use a hashMap with the key being the number and the value being a linkedList of pairs
that stores the data as Bytes. I chose to do this over a run-length optimization algorithm because this would save
even more space with generic data within the 2D array. For the example given we save about 5.33 times the space compared
to storing it as a 2D array with easy restoration to a 2D array.

For the data given, doing a run-length optimization algorithm would actually save less space than this solution since it
would have to store the non-sequential data as 2-times the space it is originally saved as. In row 2 for example,
{1,3,5,6,5,6} would be stored as {1,1,3,1,5,1,6,1,5,1,6,1} which is actually the worst case for this algorithm where it
makes the original array stored as twice the size it originally was stored as. Therefore utilizing a hashMap is the best
solution for these data types.

My algorithm loops through the array and appends any key's value with a pair of bytes for the row and column it is
originally stored within. This saves space and optimizes the retrieval of data. In order to retrieve, I iterate the
map and then iterate through the linkedList storage to populate an array back to its original location and size.

Sample Output:

Original:
235555
135656
055563

Stored as this:
0: val [2=0]
1: val [1=0]
2: val [0=0]
3: val [0=1, 1=1, 2=5]
5: val [0=2, 0=3, 0=4, 0=5, 1=2, 1=4, 2=1, 2=2, 2=3]
6: val [1=3, 1=5, 2=4]

Restoring array:
235555
135656
055563